!!! 5
%head
  %title= 'Hackadash: ' + $series_set.github_org
  %link(href="bootstrap/css/bootstrap.min.css" rel="stylesheet")
  %script(src="bootstrap/js/bootstrap.min.js")
  %script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js")
  %script(src="highcharts.js")
  
  :css
    .team_name {
      color: orange;
      font-weight: bold;
      display: inline;
    }
    
    ul.notifications {
      /* this is cool, but not what we want
      -moz-column-count: 3;
      -webkit-column-count: 3;
      column-count: 3;
      */
      
      font-size: 130%;
    }
    
    ul.notifications li {
      list-style-type: none;
    }
    
  :javascript
    // uncomment for fake data during dev
    //setTimeout("lorem()", 500);
    
    // this is a value 1 through 3
    var next_notification_column = 1;
      
    function open_websocket() {
      return new WebSocket('ws://#{ $config[:websocket_url_hostname] }:#{ $config[:websocket_port] }');
    }
    var socket = open_websocket();

    socket.onopen = function (e) {
      console.log("WebSocket onopen");
    };

    socket.onmessage = function (e) {
      console.log("WebSocket onmessage: " + e.data);
      if (e.data == 'Hello') return null;
      
      // This will throw an error in the console log if the message is not valid JSON
      server_points = JSON.parse(e.data);
      server_points.forEach(function(this_point) {
        //alert(this_point);
        // Expecting object of this format, where data_point can be passed directly to series.addPoint
        // {"team": "Team01", "comment": "added stuff", "data_point": [1345775027, 1000]}
        series = chart1.get('series_' + this_point['team']);
        series.addPoint(this_point['data_point']);
        
        add_message_for_team(this_point['team'], this_point['comment'])
      });
    };

    socket.onclose = function(e) {
      //add_notification("<li>-- WebSocket onclose!</li>");
      console.log("WebSocket onclose; re-opening websocket in 5ms...");
      setTimeout("socket = open_websocket();", 5);
    };
    
    function add_notification(inner_html) {
      var line = $(inner_html).hide();
      line.prependTo($('#notifications' + next_notification_column)).slideDown('fast');
      next_notification_column = next_notification_column == 3 ? 1 : next_notification_column + 1;
    }
    
    function add_message_for_team(team, comment) {
      // WARNING: this is a potential XSS vulnerability... Make sure the server sends entity-escaped data
      add_notification('<li><span class="team_name">' + team + ': </span><span class="comment">' + comment + '</span></li>');
    }
    
    function lorem() {
      add_message_for_team("Team01", "Added some stuff; more stuff; hoping to win the Hackathon!  Added some stuff; more stuff; hoping to win the Hackathon!");
      setTimeout("lorem()", 1200);
    }
    
    function initial_chart_data() {
      $.ajax({
        url: 'all.json',
        cache: false,
        // resulting JSON is automatically parsed
        success: function(server_series_set) {
          console.log("got AJAX success for all.json");
          server_series_set.forEach(function(this_server_series) {
            console.log("adding series to the chart: " + this_server_series[0])
            // Add this series to the chart, without redrawing the chart
            chart1.addSeries({
              id: 'series_' + this_server_series[0],
              name: this_server_series[0],
              data: this_server_series[1]
            }, false);
          })

          chart1.redraw();
          
        }
      });
      
      $.ajax({
        url: 'all_comments.json',
        cache: false,
        // resulting JSON is automatically parsed
        success: function(comments) {
          console.log("got AJAX success for all_comments.json");
          comments.forEach(function(this_comment) {
            console.log("adding comment: " + this_comment)
            // Add this comment to the list
            add_message_for_team(this_comment['team'], this_comment['comment']);
          });
        }
      });
    }
    
    var chart1; // globally available
    $(document).ready(function() {
      Highcharts.setOptions({
        global: {
          useUTC: false
        }
      });
      
      chart1 = new Highcharts.Chart({
         colors: ["#DDDF0D", "#7798BF", "#55BF3B", "#DF5353", "#aaeeee", "#ff0066", "#eeaaee",
                  "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
         chart: {
            backgroundColor: "#333",
            plotBackgroundColor: null,
            plotShadow: false,
            plotBorderWidth: 0,
            
            renderTo: 'chart_container',
            type: 'line',
            zoomType: 'x',
            events: {
              load: initial_chart_data
            }
         },
         credits: {
           enabled: false
         },
         title: {
           style: {
             color: 'orange'
           },
            text: 'Git repository code volume by team'
         },
         xAxis: {
            lineColor: '#999',
            tickColor: '#999',
            
            type: 'datetime',
            tickPanelInterval: 150,
            labels: {
               style: {
                  color: '#FFF',
                  fontWeight: 'bold'
               }
            },
            title: {
              style: {
                color: 'orange'
              },
              text: 'Time of Git Commit'
            }
         },
         yAxis: {
            min: 1,
            type: 'linear', // logarithmic, linear
            labels: {
               style: {
                  color: '#FFF',
                  fontWeight: 'bold'
               }
            },
            title: {
              style: {
                color: 'orange'
              },
              text: 'Lines of code per repository, net'
            }
         },
         legend: {
            itemStyle: {
               color: '#FFF'
            },
            itemHoverStyle: {
               color: '#FFF'
            },
            itemHiddenStyle: {
               color: '#999'
            }
         },
         labels: {
            style: {
               color: '#CCC'
            }
         },
         series: []
      });
    });
    
%body(style="background-color: #333; color: white")
  .navbar.navbar-fixed-top
    #chart_container(style="width: 100%; height: 400px")
      
  / Received Websocket messages will be inserted into these lists
  .row-fluid(style="margin-top: 400px")
    %ul#notifications1.notifications.span4
    %ul#notifications2.notifications.span4
    %ul#notifications3.notifications.span4

